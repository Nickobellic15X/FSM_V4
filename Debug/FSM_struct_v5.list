
FSM_struct_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000214c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002340  08002340  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002340  08002340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002348  08002348  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000070  080023c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080023c0  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c166  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c55  00000000  00000000  0002c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002de60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001778a  00000000  00000000  0002f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b363  00000000  00000000  000469a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095853  00000000  00000000  00051d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be8  00000000  00000000  000e75ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080022c8 	.word	0x080022c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080022c8 	.word	0x080022c8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
static void MX_GPIO_Init(void);
Event events;
StateMachine state_machine;

int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  HAL_Init();
 80004d0:	f000 fc1e 	bl	8000d10 <HAL_Init>
  SystemClock_Config();
 80004d4:	f000 f82e 	bl	8000534 <SystemClock_Config>
  MX_GPIO_Init();
 80004d8:	f000 f898 	bl	800060c <MX_GPIO_Init>

  initstatemachine(&state_machine,10);
 80004dc:	210a      	movs	r1, #10
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <main+0x28>)
 80004e0:	f000 fa52 	bl	8000988 <initstatemachine>
  initevent(&events);
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <main+0x2c>)
 80004e6:	f000 fa7d 	bl	80009e4 <initevent>

  while(1)
  {


	  StateMachine_Dispatch(&state_machine,&events);
 80004ea:	4903      	ldr	r1, [pc, #12]	; (80004f8 <main+0x2c>)
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <main+0x28>)
 80004ee:	f000 f9ef 	bl	80008d0 <StateMachine_Dispatch>
  {
 80004f2:	e7fa      	b.n	80004ea <main+0x1e>
 80004f4:	20000098 	.word	0x20000098
 80004f8:	200000b8 	.word	0x200000b8

080004fc <HAL_GPIO_EXTI_Callback>:
  }


}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
	  if (GPIO_Pin == GPIO_PIN_0)
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d104      	bne.n	8000516 <HAL_GPIO_EXTI_Callback+0x1a>
	  {

		  state_machine.ptr_Add_Event_To_Buffer(&state_machine, PA0);
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_GPIO_EXTI_Callback+0x34>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	2104      	movs	r1, #4
 8000512:	4807      	ldr	r0, [pc, #28]	; (8000530 <HAL_GPIO_EXTI_Callback+0x34>)
 8000514:	4798      	blx	r3



	  }
	  if (GPIO_Pin == GPIO_PIN_13)
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800051c:	d104      	bne.n	8000528 <HAL_GPIO_EXTI_Callback+0x2c>
	  {

		  state_machine.ptr_Add_Event_To_Buffer(&state_machine, PC13);
 800051e:	4b04      	ldr	r3, [pc, #16]	; (8000530 <HAL_GPIO_EXTI_Callback+0x34>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	2105      	movs	r1, #5
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <HAL_GPIO_EXTI_Callback+0x34>)
 8000526:	4798      	blx	r3
	  }
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000098 	.word	0x20000098

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fe40 	bl	80021c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <SystemClock_Config+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a28      	ldr	r2, [pc, #160]	; (8000604 <SystemClock_Config+0xd0>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd4>)
 8000582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	2310      	movs	r3, #16
 800059e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a8:	2310      	movs	r3, #16
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b2:	2304      	movs	r3, #4
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 febe 	bl	8001340 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ca:	f000 f8af 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f920 	bl	8001830 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005f6:	f000 f899 	bl	800072c <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <MX_GPIO_Init+0xec>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <MX_GPIO_Init+0xec>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <MX_GPIO_Init+0xec>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <MX_GPIO_Init+0xec>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <MX_GPIO_Init+0xec>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <MX_GPIO_Init+0xec>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b26      	ldr	r3, [pc, #152]	; (80006f8 <MX_GPIO_Init+0xec>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <MX_GPIO_Init+0xec>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_GPIO_Init+0xec>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	4820      	ldr	r0, [pc, #128]	; (80006fc <MX_GPIO_Init+0xf0>)
 800067c:	f000 fe14 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000684:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0xf4>)
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	4619      	mov	r1, r3
 8000694:	481b      	ldr	r0, [pc, #108]	; (8000704 <MX_GPIO_Init+0xf8>)
 8000696:	f000 fc83 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */		//Another Button PA0
   GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069a:	2301      	movs	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_GPIO_Init+0xf4>)
 80006a0:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <MX_GPIO_Init+0xf0>)
 80006ae:	f000 fc77 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006b2:	2320      	movs	r3, #32
 80006b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4619      	mov	r1, r3
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <MX_GPIO_Init+0xf0>)
 80006ca:	f000 fc69 	bl	8000fa0 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2006      	movs	r0, #6
 80006d4:	f000 fc3a 	bl	8000f4c <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006d8:	2006      	movs	r0, #6
 80006da:	f000 fc53 	bl	8000f84 <HAL_NVIC_EnableIRQ>

   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2028      	movs	r0, #40	; 0x28
 80006e4:	f000 fc32 	bl	8000f4c <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e8:	2028      	movs	r0, #40	; 0x28
 80006ea:	f000 fc4b 	bl	8000f84 <HAL_NVIC_EnableIRQ>

}
 80006ee:	bf00      	nop
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020000 	.word	0x40020000
 8000700:	10110000 	.word	0x10110000
 8000704:	40020800 	.word	0x40020800

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 fb1b 	bl	8000d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40014800 	.word	0x40014800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>

08000736 <ON_State_PC13>:


typedef enum {STATE_TRANSITION, STATE_HANDLED, STATE_IGNORED,  INIT_STATUS}status;

static status ON_State_PC13(StateMachine *me, Event *e)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	6039      	str	r1, [r7, #0]
	me->state=OFF;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2201      	movs	r2, #1
 8000744:	701a      	strb	r2, [r3, #0]
	return STATE_TRANSITION;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <ON_State_Entry>:
static status ON_State_Entry(StateMachine *me, Event *e)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	/*
	 Can add any entry behaviour here
	 */
	HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 800075e:	2120      	movs	r1, #32
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <ON_State_Entry+0x24>)
 8000762:	f000 fdba 	bl	80012da <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 8000766:	20fa      	movs	r0, #250	; 0xfa
 8000768:	f000 fb14 	bl	8000d94 <HAL_Delay>
	return STATE_HANDLED ;
 800076c:	2301      	movs	r3, #1

}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40020000 	.word	0x40020000

0800077c <ON_State_Continue>:
static status ON_State_Continue(StateMachine *me, Event *e)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000786:	2120      	movs	r1, #32
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <ON_State_Continue+0x24>)
 800078a:	f000 fda6 	bl	80012da <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 800078e:	20fa      	movs	r0, #250	; 0xfa
 8000790:	f000 fb00 	bl	8000d94 <HAL_Delay>
	return STATE_HANDLED ; //No change is state, hence State_Handled
 8000794:	2301      	movs	r3, #1

}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020000 	.word	0x40020000

080007a4 <ON_State_Exit>:
static status ON_State_Exit(StateMachine *me, Event *e)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80007ae:	2120      	movs	r1, #32
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <ON_State_Exit+0x28>)
 80007b2:	f000 fd92 	bl	80012da <HAL_GPIO_TogglePin>
	HAL_Delay(250);
 80007b6:	20fa      	movs	r0, #250	; 0xfa
 80007b8:	f000 faec 	bl	8000d94 <HAL_Delay>
	me->state=OFF;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
	return STATE_TRANSITION ;
 80007c2:	2300      	movs	r3, #0

}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020000 	.word	0x40020000

080007d0 <OFF_State_PA0>:
static status OFF_State_PA0(StateMachine *me, Event *e)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	me->state=OFF;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]
	return STATE_TRANSITION;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <OFF_State_Entry>:
static status OFF_State_Entry(StateMachine *me, Event *e)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	/*
		 Can add any entry behaviour here
	 */

	HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80007fa:	2120      	movs	r1, #32
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <OFF_State_Entry+0x24>)
 80007fe:	f000 fd6c 	bl	80012da <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000806:	f000 fac5 	bl	8000d94 <HAL_Delay>
	return STATE_HANDLED;
 800080a:	2301      	movs	r3, #1

}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020000 	.word	0x40020000

08000818 <OFF_State_Continue>:
static status OFF_State_Continue(StateMachine *me, Event *e)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]

	HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000822:	2120      	movs	r1, #32
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <OFF_State_Continue+0x24>)
 8000826:	f000 fd58 	bl	80012da <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800082a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082e:	f000 fab1 	bl	8000d94 <HAL_Delay>

	return STATE_HANDLED;
 8000832:	2301      	movs	r3, #1

}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40020000 	.word	0x40020000

08000840 <OFF_State_Exit>:
static status OFF_State_Exit(StateMachine *me, Event *e)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 800084a:	2120      	movs	r1, #32
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <OFF_State_Exit+0x2c>)
 800084e:	f000 fd44 	bl	80012da <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000852:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000856:	f000 fa9d 	bl	8000d94 <HAL_Delay>
	me->state=ON;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
	return STATE_TRANSITION;
 8000860:	2300      	movs	r3, #0

}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40020000 	.word	0x40020000

08000870 <DEFAULT_State_PC13>:

static status DEFAULT_State_PC13(StateMachine *me, Event *e)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
	me->state=OFF;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
	return STATE_TRANSITION;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <DEFAULT_State>:


static status DEFAULT_State(StateMachine *me,Event *e)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	  me->state=DEFAULT;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2202      	movs	r2, #2
 800089e:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,1);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <DEFAULT_State+0x24>)
 80008a6:	f000 fcff 	bl	80012a8 <HAL_GPIO_WritePin>
	  return INIT_STATUS;
 80008aa:	2303      	movs	r3, #3
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40020000 	.word	0x40020000

080008b8 <Ignore_Event>:

static status Ignore_Event(StateMachine *me,Event *e)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
	return STATE_IGNORED;
 80008c2:	2302      	movs	r3, #2
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <StateMachine_Dispatch>:
};



void StateMachine_Dispatch(StateMachine * me, Event *e)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	status stat;
	state_typedef previous_state= me->state;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	73fb      	strb	r3, [r7, #15]
	e->event=Pop_Event_From_Buffer(me);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f000 f8b0 	bl	8000a46 <Pop_Event_From_Buffer>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	701a      	strb	r2, [r3, #0]
	stat= (*Statemachine_table[me->state][e->event])(me,e);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	4a22      	ldr	r2, [pc, #136]	; (8000984 <StateMachine_Dispatch+0xb4>)
 80008fc:	460b      	mov	r3, r1
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	440b      	add	r3, r1
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4403      	add	r3, r0
 8000906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800090a:	6839      	ldr	r1, [r7, #0]
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	4798      	blx	r3
 8000910:	4603      	mov	r3, r0
 8000912:	73bb      	strb	r3, [r7, #14]

	 if (stat==STATE_TRANSITION)
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d11a      	bne.n	8000950 <StateMachine_Dispatch+0x80>
	 {
		 (*Statemachine_table[previous_state][EXIT])(me,(Event *)0);
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	4919      	ldr	r1, [pc, #100]	; (8000984 <StateMachine_Dispatch+0xb4>)
 800091e:	4613      	mov	r3, r2
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	440b      	add	r3, r1
 8000928:	330c      	adds	r3, #12
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2100      	movs	r1, #0
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	4798      	blx	r3
		 (*Statemachine_table[me->state][ENTRY])(me,(Event *)0);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	4619      	mov	r1, r3
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <StateMachine_Dispatch+0xb4>)
 800093a:	460b      	mov	r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	440b      	add	r3, r1
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4413      	add	r3, r2
 8000944:	3308      	adds	r3, #8
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2100      	movs	r1, #0
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	4798      	blx	r3
	 }
	 else  if (stat == INIT_STATUS){
		 (*Statemachine_table[me->state][e->event])(me,e);
	 }
	return;
 800094e:	e014      	b.n	800097a <StateMachine_Dispatch+0xaa>
	 else  if (stat == INIT_STATUS){
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d111      	bne.n	800097a <StateMachine_Dispatch+0xaa>
		 (*Statemachine_table[me->state][e->event])(me,e);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4619      	mov	r1, r3
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <StateMachine_Dispatch+0xb4>)
 8000964:	460b      	mov	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4403      	add	r3, r0
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	6839      	ldr	r1, [r7, #0]
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	4798      	blx	r3
	return;
 8000978:	bf00      	nop
 800097a:	bf00      	nop
}
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	080022e0 	.word	0x080022e0

08000988 <initstatemachine>:




void initstatemachine(StateMachine *me,int size_of_buffer)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]

	me->state=2;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2202      	movs	r2, #2
 8000996:	701a      	strb	r2, [r3, #0]
	me->size_of_buffer = size_of_buffer;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	605a      	str	r2, [r3, #4]
	me->event_buffer= (event_typedef*)malloc(size_of_buffer*sizeof(event_typedef));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fc09 	bl	80021b8 <malloc>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	609a      	str	r2, [r3, #8]
	me->event_buffer[0] = STARTUP;  //Load the first event as start up
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
	me->current_buffer_length = 1;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2201      	movs	r2, #1
 80009ba:	615a      	str	r2, [r3, #20]
	me->read_index = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
	me->write_index = 1;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	611a      	str	r2, [r3, #16]
	me->ptr_Pop_Event_From_Buffer=Pop_Event_From_Buffer;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <initstatemachine+0x54>)
 80009cc:	61da      	str	r2, [r3, #28]
	me->ptr_Add_Event_To_Buffer=Add_Event_To_Buffer;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <initstatemachine+0x58>)
 80009d2:	619a      	str	r2, [r3, #24]

	return;
 80009d4:	bf00      	nop
}
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08000a47 	.word	0x08000a47
 80009e0:	080009ff 	.word	0x080009ff

080009e4 <initevent>:

void initevent(Event *me)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	me->event=STARTUP;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
	return;
 80009f2:	bf00      	nop
}
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <Add_Event_To_Buffer>:
//
//}


void Add_Event_To_Buffer(StateMachine *me, event_typedef event)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	460b      	mov	r3, r1
 8000a08:	70fb      	strb	r3, [r7, #3]
	if(me->current_buffer_length == me->size_of_buffer){
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	695a      	ldr	r2, [r3, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d011      	beq.n	8000a3a <Add_Event_To_Buffer+0x3c>


	}
	else{
		me->event_buffer[me->write_index] = event; //Adding event that occurred  to buffer
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	6912      	ldr	r2, [r2, #16]
 8000a1e:	4413      	add	r3, r2
 8000a20:	78fa      	ldrb	r2, [r7, #3]
 8000a22:	701a      	strb	r2, [r3, #0]
		me->current_buffer_length++;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	615a      	str	r2, [r3, #20]
		me->write_index++;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	611a      	str	r2, [r3, #16]

	}
	return ;
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
}
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <Pop_Event_From_Buffer>:




event_typedef Pop_Event_From_Buffer(StateMachine *me)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b085      	sub	sp, #20
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]

	if( me->current_buffer_length == 0){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <Pop_Event_From_Buffer+0x14>
		return NOEVENT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e01d      	b.n	8000a96 <Pop_Event_From_Buffer+0x50>
		//If there are no events to process, we return the NOEVENT event_typedef, the no_event is considerent an event condition that does what is needs to do.
	}
	else{

		event_typedef e;
		e = me->event_buffer[me->read_index];
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68d2      	ldr	r2, [r2, #12]
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	73fb      	strb	r3, [r7, #15]
		me->current_buffer_length--;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	695b      	ldr	r3, [r3, #20]
 8000a6c:	1e5a      	subs	r2, r3, #1
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	615a      	str	r2, [r3, #20]
		me->read_index++;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
		if(me->read_index == me->size_of_buffer){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d105      	bne.n	8000a94 <Pop_Event_From_Buffer+0x4e>
			me->read_index = 0;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
			me->write_index=0;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
		}
	return e ; //Return the event
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fa27 	bl	8000f36 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	201a      	movs	r0, #26
 8000b0a:	f000 fa1f 	bl	8000f4c <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b0e:	201a      	movs	r0, #26
 8000b10:	f000 fa38 	bl	8000f84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <HAL_InitTick+0xa0>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <HAL_InitTick+0xa0>)
 8000b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b22:	6453      	str	r3, [r2, #68]	; 0x44
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <HAL_InitTick+0xa0>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b30:	f107 0210 	add.w	r2, r7, #16
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f860 	bl	8001c00 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b40:	f001 f84a 	bl	8001bd8 <HAL_RCC_GetPCLK2Freq>
 8000b44:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <HAL_InitTick+0xa4>)
 8000b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4e:	0c9b      	lsrs	r3, r3, #18
 8000b50:	3b01      	subs	r3, #1
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_InitTick+0xa8>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <HAL_InitTick+0xac>)
 8000b58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_InitTick+0xa8>)
 8000b5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b60:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000b62:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <HAL_InitTick+0xa8>)
 8000b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b66:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_InitTick+0xa8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_InitTick+0xa8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000b74:	4809      	ldr	r0, [pc, #36]	; (8000b9c <HAL_InitTick+0xa8>)
 8000b76:	f001 f875 	bl	8001c64 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d104      	bne.n	8000b8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <HAL_InitTick+0xa8>)
 8000b82:	f001 f8c9 	bl	8001d18 <HAL_TIM_Base_Start_IT>
 8000b86:	4603      	mov	r3, r0
 8000b88:	e000      	b.n	8000b8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3730      	adds	r7, #48	; 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	431bde83 	.word	0x431bde83
 8000b9c:	200000bc 	.word	0x200000bc
 8000ba0:	40014800 	.word	0x40014800

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f000 fb94 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bf4:	f000 fb8c 	bl	8001310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c1e:	f001 f8dd 	bl	8001ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000bc 	.word	0x200000bc

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f001 fa82 	bl	8002164 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20018000 	.word	0x20018000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	2000008c 	.word	0x2000008c
 8000c94:	20000118 	.word	0x20000118

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ce6:	f7ff ffd7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f001 fa41 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fbed 	bl	80004cc <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d00:	08002350 	.word	0x08002350
  ldr r2, =_sbss
 8000d04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d08:	20000118 	.word	0x20000118

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f8fc 	bl	8000f36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fed8 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff feae 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000104 	.word	0x20000104

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000104 	.word	0x20000104

08000d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	; (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff4c 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5e:	f7ff ff61 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000f62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	6978      	ldr	r0, [r7, #20]
 8000f6a:	f7ff ffb1 	bl	8000ed0 <NVIC_EncodePriority>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff80 	bl	8000e7c <__NVIC_SetPriority>
}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff54 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e159      	b.n	8001270 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8148 	bne.w	800126a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d005      	beq.n	8000ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80a2 	beq.w	800126a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <HAL_GPIO_Init+0x2e8>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a56      	ldr	r2, [pc, #344]	; (8001288 <HAL_GPIO_Init+0x2e8>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b54      	ldr	r3, [pc, #336]	; (8001288 <HAL_GPIO_Init+0x2e8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001142:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_GPIO_Init+0x2ec>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a49      	ldr	r2, [pc, #292]	; (8001290 <HAL_GPIO_Init+0x2f0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x202>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a48      	ldr	r2, [pc, #288]	; (8001294 <HAL_GPIO_Init+0x2f4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x1fe>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a47      	ldr	r2, [pc, #284]	; (8001298 <HAL_GPIO_Init+0x2f8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x1fa>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a46      	ldr	r2, [pc, #280]	; (800129c <HAL_GPIO_Init+0x2fc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x1f6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a45      	ldr	r2, [pc, #276]	; (80012a0 <HAL_GPIO_Init+0x300>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x1f2>
 800118e:	2304      	movs	r3, #4
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 8001192:	2307      	movs	r3, #7
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 80011a2:	2300      	movs	r3, #0
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	; (800128c <HAL_GPIO_Init+0x2ec>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c2:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <HAL_GPIO_Init+0x304>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e6:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <HAL_GPIO_Init+0x304>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_GPIO_Init+0x304>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001210:	4a24      	ldr	r2, [pc, #144]	; (80012a4 <HAL_GPIO_Init+0x304>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <HAL_GPIO_Init+0x304>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800123a:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_GPIO_Init+0x304>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_GPIO_Init+0x304>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_GPIO_Init+0x304>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f67f aea2 	bls.w	8000fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40013800 	.word	0x40013800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	041a      	lsls	r2, r3, #16
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	887b      	ldrh	r3, [r7, #2]
 80012fa:	400b      	ands	r3, r1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f8e4 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e264      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d075      	beq.n	800144a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135e:	4ba3      	ldr	r3, [pc, #652]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b04      	cmp	r3, #4
 8001368:	d00c      	beq.n	8001384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800136a:	4ba0      	ldr	r3, [pc, #640]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001372:	2b08      	cmp	r3, #8
 8001374:	d112      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001376:	4b9d      	ldr	r3, [pc, #628]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001382:	d10b      	bne.n	800139c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	4b99      	ldr	r3, [pc, #612]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d05b      	beq.n	8001448 <HAL_RCC_OscConfig+0x108>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d157      	bne.n	8001448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e23f      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x74>
 80013a6:	4b91      	ldr	r3, [pc, #580]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a90      	ldr	r2, [pc, #576]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	e01d      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x98>
 80013be:	4b8b      	ldr	r3, [pc, #556]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a8a      	ldr	r2, [pc, #552]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b88      	ldr	r3, [pc, #544]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a87      	ldr	r2, [pc, #540]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0xb0>
 80013d8:	4b84      	ldr	r3, [pc, #528]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a83      	ldr	r2, [pc, #524]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b81      	ldr	r3, [pc, #516]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a80      	ldr	r2, [pc, #512]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d013      	beq.n	8001420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fcc0 	bl	8000d7c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fcbc 	bl	8000d7c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	; 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e204      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0xc0>
 800141e:	e014      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fcac 	bl	8000d7c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fca8 	bl	8000d7c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e1f0      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0xe8>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d063      	beq.n	800151e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001462:	4b62      	ldr	r3, [pc, #392]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146a:	2b08      	cmp	r3, #8
 800146c:	d11c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146e:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d116      	bne.n	80014a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e1c4      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001492:	4b56      	ldr	r3, [pc, #344]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4952      	ldr	r1, [pc, #328]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	e03a      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d020      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b0:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <HAL_RCC_OscConfig+0x2b0>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc61 	bl	8000d7c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fc5d 	bl	8000d7c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e1a5      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4940      	ldr	r1, [pc, #256]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_RCC_OscConfig+0x2b0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fc40 	bl	8000d7c <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fc3c 	bl	8000d7c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e184      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	d030      	beq.n	800158c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d016      	beq.n	8001560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_RCC_OscConfig+0x2b4>)
 8001534:	2201      	movs	r2, #1
 8001536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff fc20 	bl	8000d7c <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff fc1c 	bl	8000d7c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e164      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d0f0      	beq.n	8001540 <HAL_RCC_OscConfig+0x200>
 800155e:	e015      	b.n	800158c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001560:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_OscConfig+0x2b4>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fc09 	bl	8000d7c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156e:	f7ff fc05 	bl	8000d7c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e14d      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 8001582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 80a0 	beq.w	80016da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10f      	bne.n	80015ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c6:	2301      	movs	r3, #1
 80015c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_OscConfig+0x2b8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d121      	bne.n	800161a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_RCC_OscConfig+0x2b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_RCC_OscConfig+0x2b8>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fbcb 	bl	8000d7c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	e011      	b.n	800160e <HAL_RCC_OscConfig+0x2ce>
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	42470000 	.word	0x42470000
 80015f4:	42470e80 	.word	0x42470e80
 80015f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fc:	f7ff fbbe 	bl	8000d7c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e106      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b85      	ldr	r3, [pc, #532]	; (8001824 <HAL_RCC_OscConfig+0x4e4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <HAL_RCC_OscConfig+0x2f0>
 8001622:	4b81      	ldr	r3, [pc, #516]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001626:	4a80      	ldr	r2, [pc, #512]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6713      	str	r3, [r2, #112]	; 0x70
 800162e:	e01c      	b.n	800166a <HAL_RCC_OscConfig+0x32a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b05      	cmp	r3, #5
 8001636:	d10c      	bne.n	8001652 <HAL_RCC_OscConfig+0x312>
 8001638:	4b7b      	ldr	r3, [pc, #492]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a7a      	ldr	r2, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	4b78      	ldr	r3, [pc, #480]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	4a77      	ldr	r2, [pc, #476]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6713      	str	r3, [r2, #112]	; 0x70
 8001650:	e00b      	b.n	800166a <HAL_RCC_OscConfig+0x32a>
 8001652:	4b75      	ldr	r3, [pc, #468]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001656:	4a74      	ldr	r2, [pc, #464]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6713      	str	r3, [r2, #112]	; 0x70
 800165e:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a71      	ldr	r2, [pc, #452]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fb83 	bl	8000d7c <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fb7f 	bl	8000d7c <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e0c5      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	4b65      	ldr	r3, [pc, #404]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ee      	beq.n	800167a <HAL_RCC_OscConfig+0x33a>
 800169c:	e014      	b.n	80016c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fb6d 	bl	8000d7c <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff fb69 	bl	8000d7c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e0af      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016bc:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a55      	ldr	r2, [pc, #340]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 80016d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 809b 	beq.w	800181a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d05c      	beq.n	80017aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d141      	bne.n	800177c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <HAL_RCC_OscConfig+0x4ec>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fb3d 	bl	8000d7c <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fb39 	bl	8000d7c <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e081      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001718:	4b43      	ldr	r3, [pc, #268]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	019b      	lsls	r3, r3, #6
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	3b01      	subs	r3, #1
 800173e:	041b      	lsls	r3, r3, #16
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	4937      	ldr	r1, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_RCC_OscConfig+0x4ec>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb12 	bl	8000d7c <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff fb0e 	bl	8000d7c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e056      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x41c>
 800177a:	e04e      	b.n	800181a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x4ec>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fafb 	bl	8000d7c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff faf7 	bl	8000d7c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e03f      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x44a>
 80017a8:	e037      	b.n	800181a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e032      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_RCC_OscConfig+0x4e8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d028      	beq.n	8001816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d121      	bne.n	8001816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d11a      	bne.n	8001816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d111      	bne.n	8001816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	085b      	lsrs	r3, r3, #1
 80017fe:	3b01      	subs	r3, #1
 8001800:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d107      	bne.n	8001816 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40007000 	.word	0x40007000
 8001828:	40023800 	.word	0x40023800
 800182c:	42470060 	.word	0x42470060

08001830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0cc      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d90c      	bls.n	800186c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b65      	ldr	r3, [pc, #404]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a58      	ldr	r2, [pc, #352]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d044      	beq.n	8001950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d119      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ee:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e067      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190e:	4b37      	ldr	r3, [pc, #220]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f023 0203 	bic.w	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4934      	ldr	r1, [pc, #208]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001920:	f7ff fa2c 	bl	8000d7c <HAL_GetTick>
 8001924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	e00a      	b.n	800193e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff fa28 	bl	8000d7c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e04f      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 020c 	and.w	r2, r3, #12
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d1eb      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001950:	4b25      	ldr	r3, [pc, #148]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d20c      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f821 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	490a      	ldr	r1, [pc, #40]	; (80019f0 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f88c 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00
 80019ec:	40023800 	.word	0x40023800
 80019f0:	08002328 	.word	0x08002328
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a00:	b084      	sub	sp, #16
 8001a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a14:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d00d      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x40>
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	f200 80bd 	bhi.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x34>
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d003      	beq.n	8001a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2e:	e0b7      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a32:	60bb      	str	r3, [r7, #8]
       break;
 8001a34:	e0b7      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a36:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a38:	60bb      	str	r3, [r7, #8]
      break;
 8001a3a:	e0b4      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a3c:	4b5d      	ldr	r3, [pc, #372]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a46:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04d      	beq.n	8001aee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	ea02 0800 	and.w	r8, r2, r0
 8001a6a:	ea03 0901 	and.w	r9, r3, r1
 8001a6e:	4640      	mov	r0, r8
 8001a70:	4649      	mov	r1, r9
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	014b      	lsls	r3, r1, #5
 8001a7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a80:	0142      	lsls	r2, r0, #5
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	ebb0 0008 	subs.w	r0, r0, r8
 8001a8a:	eb61 0109 	sbc.w	r1, r1, r9
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a9c:	0182      	lsls	r2, r0, #6
 8001a9e:	1a12      	subs	r2, r2, r0
 8001aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	00d9      	lsls	r1, r3, #3
 8001aae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ab2:	00d0      	lsls	r0, r2, #3
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	eb12 0208 	adds.w	r2, r2, r8
 8001abc:	eb43 0309 	adc.w	r3, r3, r9
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	0259      	lsls	r1, r3, #9
 8001aca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ace:	0250      	lsls	r0, r2, #9
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	f7fe fb78 	bl	80001d4 <__aeabi_uldivmod>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4613      	mov	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	e04a      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	099b      	lsrs	r3, r3, #6
 8001af4:	461a      	mov	r2, r3
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	ea02 0400 	and.w	r4, r2, r0
 8001b06:	ea03 0501 	and.w	r5, r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	014b      	lsls	r3, r1, #5
 8001b18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b1c:	0142      	lsls	r2, r0, #5
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	1b00      	subs	r0, r0, r4
 8001b24:	eb61 0105 	sbc.w	r1, r1, r5
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	018b      	lsls	r3, r1, #6
 8001b32:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b36:	0182      	lsls	r2, r0, #6
 8001b38:	1a12      	subs	r2, r2, r0
 8001b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	00d9      	lsls	r1, r3, #3
 8001b48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b4c:	00d0      	lsls	r0, r2, #3
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	1912      	adds	r2, r2, r4
 8001b54:	eb45 0303 	adc.w	r3, r5, r3
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	0299      	lsls	r1, r3, #10
 8001b62:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b66:	0290      	lsls	r0, r2, #10
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	f7fe fb2c 	bl	80001d4 <__aeabi_uldivmod>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4613      	mov	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	60bb      	str	r3, [r7, #8]
      break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ba2:	60bb      	str	r3, [r7, #8]
      break;
 8001ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bdc:	f7ff fff0 	bl	8001bc0 <HAL_RCC_GetHCLKFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0b5b      	lsrs	r3, r3, #13
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4903      	ldr	r1, [pc, #12]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08002338 	.word	0x08002338

08001c00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0203 	and.w	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	08db      	lsrs	r3, r3, #3
 8001c3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_RCC_GetClockConfig+0x60>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0207 	and.w	r2, r3, #7
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	601a      	str	r2, [r3, #0]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e041      	b.n	8001cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f839 	bl	8001d02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f000 f9ca 	bl	800203c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d001      	beq.n	8001d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e044      	b.n	8001dba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d018      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x6c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5a:	d013      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x6c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1a      	ldr	r2, [pc, #104]	; (8001dcc <HAL_TIM_Base_Start_IT+0xb4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00e      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x6c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x6c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x6c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d111      	bne.n	8001da8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d010      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da6:	e007      	b.n	8001db8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40014000 	.word	0x40014000

08001ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0202 	mvn.w	r2, #2
 8001e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8ee 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f8e0 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8f1 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d122      	bne.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b04      	cmp	r3, #4
 8001e52:	d11b      	bne.n	8001e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0204 	mvn.w	r2, #4
 8001e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2202      	movs	r2, #2
 8001e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8c4 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001e78:	e005      	b.n	8001e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8b6 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8c7 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0208 	mvn.w	r2, #8
 8001eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f89a 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f88c 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f89d 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0210 	mvn.w	r2, #16
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f870 	bl	8002000 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f862 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f873 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10e      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d107      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0201 	mvn.w	r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fbd4 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d10e      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d107      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8e2 	bl	8002150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	2b40      	cmp	r3, #64	; 0x40
 8001f98:	d10e      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa4:	2b40      	cmp	r3, #64	; 0x40
 8001fa6:	d107      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f838 	bl	8002028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d107      	bne.n	8001fe4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0220 	mvn.w	r2, #32
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8ac 	bl	800213c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a34      	ldr	r2, [pc, #208]	; (8002120 <TIM_Base_SetConfig+0xe4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00f      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d00b      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <TIM_Base_SetConfig+0xe8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a30      	ldr	r2, [pc, #192]	; (8002128 <TIM_Base_SetConfig+0xec>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a2f      	ldr	r2, [pc, #188]	; (800212c <TIM_Base_SetConfig+0xf0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d108      	bne.n	8002086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <TIM_Base_SetConfig+0xe4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01b      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002094:	d017      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a22      	ldr	r2, [pc, #136]	; (8002124 <TIM_Base_SetConfig+0xe8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a21      	ldr	r2, [pc, #132]	; (8002128 <TIM_Base_SetConfig+0xec>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00f      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a20      	ldr	r2, [pc, #128]	; (800212c <TIM_Base_SetConfig+0xf0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00b      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a1f      	ldr	r2, [pc, #124]	; (8002130 <TIM_Base_SetConfig+0xf4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <TIM_Base_SetConfig+0xf8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <TIM_Base_SetConfig+0xfc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <TIM_Base_SetConfig+0xe4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d103      	bne.n	800210c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	615a      	str	r2, [r3, #20]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40010000 	.word	0x40010000
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40014000 	.word	0x40014000
 8002134:	40014400 	.word	0x40014400
 8002138:	40014800 	.word	0x40014800

0800213c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <__errno>:
 8002164:	4b01      	ldr	r3, [pc, #4]	; (800216c <__errno+0x8>)
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4d0d      	ldr	r5, [pc, #52]	; (80021a8 <__libc_init_array+0x38>)
 8002174:	4c0d      	ldr	r4, [pc, #52]	; (80021ac <__libc_init_array+0x3c>)
 8002176:	1b64      	subs	r4, r4, r5
 8002178:	10a4      	asrs	r4, r4, #2
 800217a:	2600      	movs	r6, #0
 800217c:	42a6      	cmp	r6, r4
 800217e:	d109      	bne.n	8002194 <__libc_init_array+0x24>
 8002180:	4d0b      	ldr	r5, [pc, #44]	; (80021b0 <__libc_init_array+0x40>)
 8002182:	4c0c      	ldr	r4, [pc, #48]	; (80021b4 <__libc_init_array+0x44>)
 8002184:	f000 f8a0 	bl	80022c8 <_init>
 8002188:	1b64      	subs	r4, r4, r5
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	2600      	movs	r6, #0
 800218e:	42a6      	cmp	r6, r4
 8002190:	d105      	bne.n	800219e <__libc_init_array+0x2e>
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	f855 3b04 	ldr.w	r3, [r5], #4
 8002198:	4798      	blx	r3
 800219a:	3601      	adds	r6, #1
 800219c:	e7ee      	b.n	800217c <__libc_init_array+0xc>
 800219e:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a2:	4798      	blx	r3
 80021a4:	3601      	adds	r6, #1
 80021a6:	e7f2      	b.n	800218e <__libc_init_array+0x1e>
 80021a8:	08002348 	.word	0x08002348
 80021ac:	08002348 	.word	0x08002348
 80021b0:	08002348 	.word	0x08002348
 80021b4:	0800234c 	.word	0x0800234c

080021b8 <malloc>:
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <malloc+0xc>)
 80021ba:	4601      	mov	r1, r0
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	f000 b80b 	b.w	80021d8 <_malloc_r>
 80021c2:	bf00      	nop
 80021c4:	2000000c 	.word	0x2000000c

080021c8 <memset>:
 80021c8:	4402      	add	r2, r0
 80021ca:	4603      	mov	r3, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d100      	bne.n	80021d2 <memset+0xa>
 80021d0:	4770      	bx	lr
 80021d2:	f803 1b01 	strb.w	r1, [r3], #1
 80021d6:	e7f9      	b.n	80021cc <memset+0x4>

080021d8 <_malloc_r>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	1ccd      	adds	r5, r1, #3
 80021dc:	f025 0503 	bic.w	r5, r5, #3
 80021e0:	3508      	adds	r5, #8
 80021e2:	2d0c      	cmp	r5, #12
 80021e4:	bf38      	it	cc
 80021e6:	250c      	movcc	r5, #12
 80021e8:	2d00      	cmp	r5, #0
 80021ea:	4606      	mov	r6, r0
 80021ec:	db01      	blt.n	80021f2 <_malloc_r+0x1a>
 80021ee:	42a9      	cmp	r1, r5
 80021f0:	d903      	bls.n	80021fa <_malloc_r+0x22>
 80021f2:	230c      	movs	r3, #12
 80021f4:	6033      	str	r3, [r6, #0]
 80021f6:	2000      	movs	r0, #0
 80021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021fa:	f000 f857 	bl	80022ac <__malloc_lock>
 80021fe:	4921      	ldr	r1, [pc, #132]	; (8002284 <_malloc_r+0xac>)
 8002200:	680a      	ldr	r2, [r1, #0]
 8002202:	4614      	mov	r4, r2
 8002204:	b99c      	cbnz	r4, 800222e <_malloc_r+0x56>
 8002206:	4f20      	ldr	r7, [pc, #128]	; (8002288 <_malloc_r+0xb0>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b923      	cbnz	r3, 8002216 <_malloc_r+0x3e>
 800220c:	4621      	mov	r1, r4
 800220e:	4630      	mov	r0, r6
 8002210:	f000 f83c 	bl	800228c <_sbrk_r>
 8002214:	6038      	str	r0, [r7, #0]
 8002216:	4629      	mov	r1, r5
 8002218:	4630      	mov	r0, r6
 800221a:	f000 f837 	bl	800228c <_sbrk_r>
 800221e:	1c43      	adds	r3, r0, #1
 8002220:	d123      	bne.n	800226a <_malloc_r+0x92>
 8002222:	230c      	movs	r3, #12
 8002224:	6033      	str	r3, [r6, #0]
 8002226:	4630      	mov	r0, r6
 8002228:	f000 f846 	bl	80022b8 <__malloc_unlock>
 800222c:	e7e3      	b.n	80021f6 <_malloc_r+0x1e>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	1b5b      	subs	r3, r3, r5
 8002232:	d417      	bmi.n	8002264 <_malloc_r+0x8c>
 8002234:	2b0b      	cmp	r3, #11
 8002236:	d903      	bls.n	8002240 <_malloc_r+0x68>
 8002238:	6023      	str	r3, [r4, #0]
 800223a:	441c      	add	r4, r3
 800223c:	6025      	str	r5, [r4, #0]
 800223e:	e004      	b.n	800224a <_malloc_r+0x72>
 8002240:	6863      	ldr	r3, [r4, #4]
 8002242:	42a2      	cmp	r2, r4
 8002244:	bf0c      	ite	eq
 8002246:	600b      	streq	r3, [r1, #0]
 8002248:	6053      	strne	r3, [r2, #4]
 800224a:	4630      	mov	r0, r6
 800224c:	f000 f834 	bl	80022b8 <__malloc_unlock>
 8002250:	f104 000b 	add.w	r0, r4, #11
 8002254:	1d23      	adds	r3, r4, #4
 8002256:	f020 0007 	bic.w	r0, r0, #7
 800225a:	1ac2      	subs	r2, r0, r3
 800225c:	d0cc      	beq.n	80021f8 <_malloc_r+0x20>
 800225e:	1a1b      	subs	r3, r3, r0
 8002260:	50a3      	str	r3, [r4, r2]
 8002262:	e7c9      	b.n	80021f8 <_malloc_r+0x20>
 8002264:	4622      	mov	r2, r4
 8002266:	6864      	ldr	r4, [r4, #4]
 8002268:	e7cc      	b.n	8002204 <_malloc_r+0x2c>
 800226a:	1cc4      	adds	r4, r0, #3
 800226c:	f024 0403 	bic.w	r4, r4, #3
 8002270:	42a0      	cmp	r0, r4
 8002272:	d0e3      	beq.n	800223c <_malloc_r+0x64>
 8002274:	1a21      	subs	r1, r4, r0
 8002276:	4630      	mov	r0, r6
 8002278:	f000 f808 	bl	800228c <_sbrk_r>
 800227c:	3001      	adds	r0, #1
 800227e:	d1dd      	bne.n	800223c <_malloc_r+0x64>
 8002280:	e7cf      	b.n	8002222 <_malloc_r+0x4a>
 8002282:	bf00      	nop
 8002284:	20000090 	.word	0x20000090
 8002288:	20000094 	.word	0x20000094

0800228c <_sbrk_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	4d06      	ldr	r5, [pc, #24]	; (80022a8 <_sbrk_r+0x1c>)
 8002290:	2300      	movs	r3, #0
 8002292:	4604      	mov	r4, r0
 8002294:	4608      	mov	r0, r1
 8002296:	602b      	str	r3, [r5, #0]
 8002298:	f7fe fcc8 	bl	8000c2c <_sbrk>
 800229c:	1c43      	adds	r3, r0, #1
 800229e:	d102      	bne.n	80022a6 <_sbrk_r+0x1a>
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	b103      	cbz	r3, 80022a6 <_sbrk_r+0x1a>
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
 80022a8:	20000108 	.word	0x20000108

080022ac <__malloc_lock>:
 80022ac:	4801      	ldr	r0, [pc, #4]	; (80022b4 <__malloc_lock+0x8>)
 80022ae:	f000 b809 	b.w	80022c4 <__retarget_lock_acquire_recursive>
 80022b2:	bf00      	nop
 80022b4:	20000110 	.word	0x20000110

080022b8 <__malloc_unlock>:
 80022b8:	4801      	ldr	r0, [pc, #4]	; (80022c0 <__malloc_unlock+0x8>)
 80022ba:	f000 b804 	b.w	80022c6 <__retarget_lock_release_recursive>
 80022be:	bf00      	nop
 80022c0:	20000110 	.word	0x20000110

080022c4 <__retarget_lock_acquire_recursive>:
 80022c4:	4770      	bx	lr

080022c6 <__retarget_lock_release_recursive>:
 80022c6:	4770      	bx	lr

080022c8 <_init>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr

080022d4 <_fini>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	bf00      	nop
 80022d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022da:	bc08      	pop	{r3}
 80022dc:	469e      	mov	lr, r3
 80022de:	4770      	bx	lr
